[gd_scene load_steps=11 format=3 uid="uid://d1ytv2b5seb1r"]

[ext_resource type="Script" path="res://Scenes/Levels/SelectScript.gd" id="1_knuwc"]
[ext_resource type="SpriteFrames" uid="uid://dli4a8csxhv4n" path="res://Scenes/Level Assets/Planets/earth.tres" id="3_bp0un"]

[sub_resource type="Shader" id="Shader_fmcrq"]
code = "shader_type canvas_item;

uniform vec4 color : source_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
		
		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_81jay"]
shader = SubResource("Shader_fmcrq")
shader_parameter/color = Color(1, 1, 1, 0)
shader_parameter/width = 1.0
shader_parameter/pattern = 0
shader_parameter/inside = true
shader_parameter/add_margins = false

[sub_resource type="CircleShape2D" id="CircleShape2D_faio2"]
radius = 82.0061

[sub_resource type="LabelSettings" id="LabelSettings_m10l7"]
font_size = 4

[sub_resource type="Animation" id="Animation_t4fw5"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("AnimatedSprite2D:material:shader_parameter/color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 0)]
}

[sub_resource type="Animation" id="Animation_j83nk"]
resource_name = "hide_outline"
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("AnimatedSprite2D:material:shader_parameter/color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 0)]
}

[sub_resource type="Animation" id="Animation_l18no"]
resource_name = "show_outline"
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("AnimatedSprite2D:material:shader_parameter/color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 1)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_hscd5"]
_data = {
"RESET": SubResource("Animation_t4fw5"),
"hide_outline": SubResource("Animation_j83nk"),
"show_outline": SubResource("Animation_l18no")
}

[node name="Planet" type="Area2D"]
script = ExtResource("1_knuwc")
speed = 5

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
material = SubResource("ShaderMaterial_81jay")
sprite_frames = ExtResource("3_bp0un")
autoplay = "default"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
shape = SubResource("CircleShape2D_faio2")

[node name="VisibleOnScreenNotifier2D" type="VisibleOnScreenNotifier2D" parent="."]
position = Vector2(-1.43051e-06, 0.5)
scale = Vector2(2.5, 2.55)

[node name="PlanetNameMarker" type="Marker2D" parent="."]
position = Vector2(-13, 27)

[node name="CenterContainer" type="CenterContainer" parent="."]
unique_name_in_owner = true
anchors_preset = -1
anchor_left = -0.05
anchor_top = 0.0666667
anchor_right = 0.0611111
anchor_bottom = 0.288889
offset_left = -13.0
offset_top = 27.0
offset_right = 16.0
offset_bottom = 36.0
metadata/_edit_use_anchors_ = true

[node name="PlanetName" type="Label" parent="CenterContainer"]
unique_name_in_owner = true
visible = false
layout_mode = 2
auto_translate = false
text = "Mercury"
horizontal_alignment = 1
vertical_alignment = 1
metadata/_edit_use_anchors_ = true

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="Marker" type="Marker2D" parent="CanvasLayer"]
unique_name_in_owner = true

[node name="Label" type="Label" parent="CanvasLayer/Marker"]
unique_name_in_owner = true
visible = false
offset_left = -19.0
offset_top = 2.0
offset_right = 21.0
offset_bottom = 11.0
size_flags_horizontal = 0
text = "Earth"
label_settings = SubResource("LabelSettings_m10l7")
horizontal_alignment = 1
vertical_alignment = 1

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_hscd5")
}

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="body_exited" from="." to="." method="_on_body_exited"]
